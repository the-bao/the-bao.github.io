<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on BLOG OF RTY</title>
    <link>https://the-bao.github.io/tags/go/</link>
    <description>Recent content in go on BLOG OF RTY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jul 2022 15:53:13 +0800</lastBuildDate><atom:link href="https://the-bao.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go版本管理</title>
      <link>https://the-bao.github.io/go/go%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 25 Jul 2022 15:53:13 +0800</pubDate>
      
      <guid>https://the-bao.github.io/go/go%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid>
      <description>go的版本管理 go.sum ​	为了确保一致性构建，Go引入了go.mod文件来标记每个依赖包的版本，在构建过程中go命令会下载go.mod中的依赖包，下载的依赖包会缓存在本地，以便下次构建。
​	考虑到下载的依赖包有可能是被黑客恶意篡改的，以及缓存在本地的依赖包也有被篡改的可能，单单一个go.mod文件并不能保证一致性构建。
为了解决Go module的这一安全隐患，Go开发团队在引入go.mod的同时也引入了go.sum文件，用于记录每个依赖包的哈希值，在构建时，如果本地的依赖包hash值与go.sum文件中记录得不一致，则会拒绝构建。
go.mod ​	Go.mod是Golang1.11版本新引入的官方包管理工具用于解决之前没有地方记录依赖包具体版本的问题，方便依赖包的管理。
​	Go.mod其实就是一个Modules，关于Modules的官方定义为：
​	Modules是相关Go包的集合，是源代码交换和版本控制的单元。go命令直接支持使用Modules，包括记录和解析对其他模块的依赖性。Modules替换旧的基于GOPATH的方法，来指定使用哪些源文件。
​	Modules和传统的GOPATH不同，不需要包含例如src，bin这样的子目录，一个源代码目录甚至是空目录都可以作为Modules，只要其中包含有go.mod文件。
​	**简而言之，没有go.mod的项目需要按照GOPATH的模式进行开发。有了go.mod的项目可以脱离GOPATH这种包管理模式，从而变得更加灵活。**有点类似于springboot中通过pom.xml进行依赖配置，python中的requirements.txt。
​	go.mod只是一个配置文件，真正导入的依赖包被下载到哪里了呢？ $GOPATH/pkg/mod
​	依赖包的版本如何控制呢？ 下载到$GOPATH/pkg/mod的依赖包会有一个版本好，就和maven的包管理差不多。可以看到每个依赖包后面都有一个版本号。
​
环境变量GO111MODULE
Go 1.11中的module支持临时环境变量——GO111MODULE，它可以设置以下三个值：off,on或者auto(默认)
off：关闭go module，即使用gopath模式 on：使用go module，而不会使用gopath auto：go命令行会根据当前目录来决定是否启用module功能。只有当当前目录在GOPATH/src目录之外而且当前目录包含go.mod文件或者其子目录包含go.mod文件才会启用。 设置GO111MODULE的值
go env -w GO111MODULE=value </description>
    </item>
    
    <item>
      <title>go的环境配置</title>
      <link>https://the-bao.github.io/go/set-up/</link>
      <pubDate>Mon, 25 Jul 2022 14:45:26 +0800</pubDate>
      
      <guid>https://the-bao.github.io/go/set-up/</guid>
      <description>go的环境配置 安装go ​	Windows下直接去官网下载，然后按步骤安装，非常简单，不多赘述。
配置gopath ​	GOPATH是一个环境变量，用来表明你写的go项目的存放路径。
​	go和其他的语言不一样，他的项目代码都放在同一个文件夹下就是你的gopath。
​	创建好GOPATH后，要配置环境变量。
​	添加系统变量
​	再把goroot和gopath都加入到系统变量的path中。
​	配置好了以后，可以通过命令行检查你的goroot和gopath的路径。输入go env查看go的环境变量
​	这里可以顺手改一下goproxy，方便后面配置vscode开发环境
go env -w GOPROXY=https://goproxy.cn,direct 配置VSCode开发环境 ​	vscode是一个代码编辑器，但是强大到可以作为一个轻量级的IDE，用过的都说好。当然goland也是可以的。新手学习建议使用vscode。
​	先安装好插件
​	ctrl+shift+p,然后输入go：install，执行update tools命令安装开发插件
​	当这些插件安装成功后，go的环境配置也基本上完成了。</description>
    </item>
    
    <item>
      <title>golang基础语法（一）</title>
      <link>https://the-bao.github.io/go/go1/</link>
      <pubDate>Mon, 25 Jul 2022 14:11:55 +0800</pubDate>
      
      <guid>https://the-bao.github.io/go/go1/</guid>
      <description>go的数据类型 布尔类型 数字类型 字符串类型 派生类型 指针（pointer） 数组 结构化（struct） channel类型 函数类型 切片类型 接口类型 map类型 go变量与常量 可以通过下面几种方式进行变量声明和赋值。:=的赋值包含了声明，因此只能在函数体内使用
// var是go中表示变量的关键字 var identifier type //第一种 var v_name v_type v_name = value //第二种 var v_name = value //第三种 v_name := value 可以通过下面几种方式声明常量和赋值
// const是go中表示常量的关键字 const identifier [type] = value //多个常量的声明 const c_name1, c_name2 = value1, value2 //常量还可以这样声明 const ( // PassWordCost 密码加密难度 PassWordCost = 12 // Active 激活用户 Active string = &amp;#34;active&amp;#34; // Inactive 未激活用户 Inactive string = &amp;#34;inactive&amp;#34; // Suspend 被封禁用户 Suspend string = &amp;#34;suspend&amp;#34; ) iota，特殊常量，可以认为是一个可以被编译器修改的常量。</description>
    </item>
    
  </channel>
</rss>
